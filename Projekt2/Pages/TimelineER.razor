@page "/timeline-er"
@inject DataServiceER DataSvc
@inject HelpersService Helpers
@inject DropdownService DropdownSvc
@inject IJSRuntime jsRuntime



@if (IsLoading)
{
    <p>Page is loading...</p>
}

@if (IsLoading == false)
{
    <DropdownStr Label="Gliederungsart"
                 SelectedValue="@SelectedStructureType"
                 Items="DropdownSvc.StructureTypes"
                 DisabledKeys="DisabledStructures"
                 SelectionChanged="OnSelectStructureType" />

    <DropdownStr Label="Werte-Art"
                 SelectedValue="@SelectedERAccountType"
                 Items="DropdownSvc.ERAccountTypes"
                 DisabledKeys="DisabledERAccountTypes"
                 SelectionChanged="OnSelectERAccountType" />

    <DropdownInt Label="Level"
                 SelectedValue="@SelectedLevel"
                 Items="DropdownSvc.Levels"
                 SelectionChanged="OnSelectLevel" />

    <DropdownStr Label="Umfang"
                 SelectedValue="@SelectedAccountRange"
                 Items="DropdownSvc.AccountRanges"
                 SelectionChanged="OnSelectAccountRange" />

    <hr />
}

@if (IsLoading == false && ERDataForMultipleYears != null)
{
    <table class="table">
        <thead>
            <tr>
                <th class="acc-th">
                    Id / Konto-Name
                </th>
                @foreach (int y in ERDataForMultipleYears.SelectedYears)
                {
                    <th class="acc-th account-cell-@(y < DataSvc.CURRENT_YEAR ? "actual": "budget")">
                        @(y < DataSvc.CURRENT_YEAR ? "Rg Jahr" :"Budget" ) @y
                    </th>
                }
            </tr>
        </thead>
        <tbody>

            @foreach (AccountMultipleYearsViewModel acc in ERDataForMultipleYears.AccountsWithMultipleYears)
            {
                <CascadingValue Value="@SelectedStructureType" Name="SelectedStructureType">
                    <CascadingValue Value="@SelectedERAccountType" Name="SelectedERAccountType">
                        <CascadingValue Value="@SelectedAccountRange" Name="SelectedAccountRange">
                            <AccountTimeline AccountMultipleYears="acc"
                                             LevelInGui="1" />
                        </CascadingValue>
                    </CascadingValue>
                </CascadingValue>
            }
            <tr>
                <th>
                    @(SelectedERAccountType == ERAccountType.Balances.ToString() ? "Gesamt-Differenz" : "Total")
                </th>

                @foreach (YearTotalsViewModel m in ERDataForMultipleYears.ListOfAccountYearTotals)
                {
                    <th class="@(GetTotalCellClassValues(m, GetTotalValue(SelectedERAccountType, m)))">
                        @(Helpers.FormatDecimal(GetTotalValue(SelectedERAccountType, m)))
                    </th>
                }
            </tr>
        </tbody>
    </table>
}

@code {

    bool IsLoading = true;

    List<int> SelectedYears { get; set; }

    string SelectedStructureType = StructureType.Functions.ToString();
    string SelectedERAccountType = ERAccountType.Expenses.ToString();
    string SelectedAccountRange = AccountRange.UsedAccounts.ToString();
    int SelectedLevel;

    List<string> DisabledStructures = new List<string>();
    List<string> DisabledERAccountTypes = new List<string>();

    MultipleYearsViewModel ERDataForMultipleYears { get; set; }


    protected override async Task OnInitializedAsync()
    {
        this.SelectedLevel = 1;
        SetDisabledStructureTypes(SelectedERAccountType);
        SetDisabledERAccountTypes(SelectedStructureType);

        this.SelectedYears = DataSvc.GetRelevantYears(DataSvc.CURRENT_YEAR);
        ReloadAccounts(SelectedStructureType, SelectedYears, SelectedERAccountType, SelectedLevel, SelectedAccountRange);
        IsLoading = false;
    }


    string GetTotalCellClassValues(YearTotalsViewModel m, decimal? value)
    {
        string result = $"account-cell-{(m.Year < DataSvc.CURRENT_YEAR ? "actual" : "budget")}";

        if (SelectedERAccountType == ERAccountType.Balances.ToString())
        {
            result += Helpers.IsPositive(value) ? " pos-value" : " neg-value";
        }
        return result;
    }


    decimal? GetTotalValue(string type, YearTotalsViewModel m)
    {
        if (Enum.TryParse(type, out ERAccountType eRAccountType))
        {
            return eRAccountType switch
            {
                ERAccountType.Expenses => m.Year < DataSvc.CURRENT_YEAR ? m.ExpensesActualTotal : m.ExpensesBudgetTotal,
                ERAccountType.Income => m.Year < DataSvc.CURRENT_YEAR ? m.IncomeActualTotal : m.IncomeBudgetTotal,
                ERAccountType.Balances => m.Year < DataSvc.CURRENT_YEAR ? m.BalanceActualTotal : m.BalanceBudgetTotal,
                _ => null
            };
        }
        return null;
    }


    async void OnSelectStructureType(string inputVal)
    {
        await jsRuntime.InvokeAsync<string>("console.error", inputVal);
        if (inputVal != SelectedStructureType)
        {
            SetDisabledERAccountTypes(inputVal);
            SelectedStructureType = inputVal;
            ReloadAccounts(SelectedStructureType, SelectedYears, SelectedERAccountType, SelectedLevel, SelectedAccountRange);
            StateHasChanged(); // Triggers updating of Dropdown with ER-Account-Types
        }
    }


    async void OnSelectERAccountType(string inputVal)
    {
        await jsRuntime.InvokeAsync<string>("console.error", inputVal);
        if (inputVal != SelectedERAccountType)
        {
            SetDisabledStructureTypes(inputVal);
            SelectedERAccountType = inputVal;

            // In cases user selects "Balances", fetching new api-data is only needed if ERDataForMultipleYears == null
            if (SelectedERAccountType != ERAccountType.Balances.ToString() || ERDataForMultipleYears == null)
            {
                ReloadAccounts(SelectedStructureType, SelectedYears, SelectedERAccountType, SelectedLevel, SelectedAccountRange);
            }
            StateHasChanged();
        }
    }


    async void OnSelectLevel(int inputVal)
    {
        await jsRuntime.InvokeAsync<string>("console.error", inputVal);

        if (inputVal != SelectedLevel)
        {
            SelectedLevel = inputVal;
            ReloadAccounts(SelectedStructureType, SelectedYears, SelectedERAccountType, SelectedLevel, SelectedAccountRange);
        }
    }


    async void OnSelectAccountRange(string inputVal)
    {
        await jsRuntime.InvokeAsync<string>("console.error", inputVal);
        if (inputVal != SelectedAccountRange)
        {
            SelectedAccountRange = inputVal;
            ReloadAccounts(SelectedStructureType, SelectedYears, SelectedERAccountType, SelectedLevel, SelectedAccountRange);
        }
    }


    private async void ReloadAccounts(string structureT, List<int> selectedYears, string accType, int level, string accRange)
    {
        await jsRuntime.InvokeAsync<string>
            ("console.error", $"StructureType: {structureT} ER-Account-Type: {accType}, Level: {level}, Range {accRange}");

        if (level > 0 &&
            Enum.TryParse(structureT, out StructureType structureType) &&
            Enum.TryParse(accType, out ERAccountType erAccountType) &&
            Enum.TryParse(accRange, out AccountRange range))
        {
            this.IsLoading = true;
            StateHasChanged();
            ERDataForMultipleYears = await DataSvc.FetchAccountGroupsForTimeline(structureType,
                                                                                 erAccountType,
                                                                                 selectedYears,
                                                                                 SelectedLevel,
                                                                                 range == AccountRange.AllAccounts);
            this.IsLoading = false;
            StateHasChanged();
        }
    }


    private void SetDisabledStructureTypes(string selectedERAccountType)
    {
        if (selectedERAccountType == ERAccountType.Balances.ToString())
        {
            DisabledStructures.Add(StructureType.Subjects.ToString());
        }
        else
        {
            DisabledStructures.Clear();
        }
    }

    private void SetDisabledERAccountTypes(string selectedStructureType)
    {
        if (selectedStructureType == StructureType.Subjects.ToString())
        {
            DisabledERAccountTypes.Add(ERAccountType.Balances.ToString());
        }
        else
        {
            DisabledERAccountTypes.Clear();
        }
    }

}
