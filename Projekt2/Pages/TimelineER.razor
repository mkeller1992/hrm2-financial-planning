@page "/timeline-er"
@inject DataServiceER DataSvc
@inject ScenarioServiceER ScenarioSvc
@inject HelpersService Helpers
@inject DropdownService DropdownSvc
@inject IJSRuntime jsRuntime
@inject NavigationManager NavigationManager

@using Projekt2.Constants



@if (isLoading)
{
    <p>Page is loading...</p>
}

@if (isLoading == false)
{
    <DropdownStr Label="Gliederungsart"
                 SelectedValue="@selectedStructureType"
                 Items="DropdownSvc.StructureTypes"
                 DisabledKeys="disabledStructures"
                 SelectionChanged="OnSelectStructureType" />

    <DropdownStr Label="Werte-Art"
                 SelectedValue="@selectedERAccountType"
                 Items="DropdownSvc.ERAccountTypes"
                 DisabledKeys="disabledERAccountTypes"
                 SelectionChanged="OnSelectERAccountType" />

    <DropdownInt Label="Level"
                 SelectedValue="@selectedLevel"
                 Items="DropdownSvc.Levels"
                 SelectionChanged="OnSelectLevel" />


    @if (isInScenarioMode)
    {
        <DropdownStr Label="Input-Daten vs. Szenario"
                     SelectedValue="@selectedScenarioType"
                     Items="DropdownSvc.ScenarioTypes"
                     SelectionChanged="OnSelectScenarioType" />

        <button class="btn btn-outline-dark"
                style="display: inline-block"
                @onclick="() => OnCreateNewScenario()">
            Neues Szenario
        </button>
    }

    <hr />
}

@if (isLoading == false && erDataForMultipleYears != null)
{
    <div class="content-scroll-wrap">
        <div class="content-scroll">

            <table class="table">
                <thead>
                    <tr>
                        <th class="acc-th first-th">
                            Id / Konto-Name
                        </th>
                        @foreach (int y in erDataForMultipleYears.SelectedYears)
                        {
                            <th class="acc-th">
                                @(y < Const.CurrentYear ? "Rg Jahr" :"Plan" ) @y
                            </th>
                        }
                    </tr>
                </thead>
                <tbody>

                    @foreach (AccountMultipleYearsViewModel acc in erDataForMultipleYears.AccountsWithMultipleYears)
                    {
                        <CascadingValue Value="@selectedStructureType" Name="SelectedStructureType">
                            <CascadingValue Value="@selectedERAccountType" Name="SelectedERAccountType">
                                <CascadingValue Value="@selectedScenarioType" Name="SelectedScenarioType">
                                    <AccountTimeline AccountMultipleYears="acc"
                                                     LevelInGui="1" />
                                </CascadingValue>
                            </CascadingValue>
                        </CascadingValue>
                    }
                    <tr>
                        <th class="first-col">
                            @(selectedERAccountType == ERAccountType.Balances.ToString() ? "Gesamt-Differenz" : "Total")
                        </th>

                        @foreach (YearTotalsViewModel m in erDataForMultipleYears.ListOfAccountYearTotals)
                        {
                            <th class="total account-cell-@(m.Year < Const.CurrentYear ? "actual" : "budget")">

                                @(GetRoundedAndFormattedTotal(m))

                                <span class="@GetColor(selectedERAccountType, m)">
                                    <i class="@(GetArrowTag(m))"></i>
                                </span>
                            </th>
                        }
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
}

@code {

    [CascadingParameter(Name = "CurrentScenario")]
    Scenario currentScenario { get; set; }

    string selectedStructureType = StructureType.Functions.ToString();
    string selectedERAccountType = ERAccountType.Expenses.ToString();
    string selectedScenarioType = null;

    bool isLoading = true;

    MultipleYearsViewModel erDataForMultipleYears = null;
    bool isInScenarioMode = false;
    int selectedLevel;
    List<string> disabledStructures = new List<string>();
    List<string> disabledERAccountTypes = new List<string>();


    protected override async Task OnInitializedAsync()
    {
        selectedScenarioType = ScenarioType.InputData.ToString();

        if (currentScenario != null)
        {
            selectedScenarioType = ScenarioType.Scenario.ToString();
            isInScenarioMode = true;
        }

        this.selectedLevel = 1;
        SetDisabledStructureTypes(selectedERAccountType);
        SetDisabledERAccountTypes(selectedStructureType);

        await ReloadAccounts();

        isLoading = false;
    }


    private string GetRoundedAndFormattedTotal(YearTotalsViewModel m)
    {
        decimal? totalRounded = Helpers.GetRoundedValue(GetTotalValue(selectedERAccountType, m));
        return Helpers.FormatDecimal(totalRounded);
    }


    private decimal? GetTotalValue(string type, YearTotalsViewModel m)
    {
        if (Enum.TryParse(type, out ERAccountType eRAccountType))
        {
            return eRAccountType switch
            {
                ERAccountType.Expenses => m.Year < Const.CurrentYear ? m.ExpensesActualTotal : m.ExpensesBudgetTotal,
                ERAccountType.Income => m.Year < Const.CurrentYear ? m.IncomeActualTotal : m.IncomeBudgetTotal,
                ERAccountType.Balances => m.Year < Const.CurrentYear ? m.BalanceActualTotal : m.BalanceBudgetTotal,
                _ => null
            };
        }
        return null;
    }


    private decimal? GetPercentChangeOfTotal(string type, YearTotalsViewModel m)
    {
        if (Enum.TryParse(type, out ERAccountType accType))
        {
            return accType switch
            {
                ERAccountType.Expenses => m.Year < Const.CurrentYear ? m.PercentageChangeExpensesActualTotal :
                                                                       m.PercentageChangeExpensesBudgetTotal,
                ERAccountType.Income => m.Year < Const.CurrentYear ? m.PercentageChangeIncomeActualTotal :
                                                                     m.PercentageChangeIncomeBudgetTotal,
                ERAccountType.Balances => m.Year < Const.CurrentYear ? m.PercentageChangeBalanceActualTotal :
                                                                       m.PercentageChangeBalanceBudgetTotal,
                _ => null
            };
        }
        return null;
    }


    private string GetColor(string type, YearTotalsViewModel m)
    {
        var h = Helpers;

        if (Enum.TryParse(type, out ERAccountType accType))
        {
            return accType switch
            {
                ERAccountType.Expenses => m.Year < Const.CurrentYear ? h.GetColorIfNegativeFav(m.PercentageChangeExpensesActualTotal) :
                                                                         h.GetColorIfNegativeFav(m.PercentageChangeExpensesBudgetTotal),
                ERAccountType.Income => m.Year < Const.CurrentYear ? h.GetColorIfPositiveFav(m.PercentageChangeIncomeActualTotal) :
                                                                       h.GetColorIfPositiveFav(m.PercentageChangeIncomeBudgetTotal),
                ERAccountType.Balances => m.Year < Const.CurrentYear ? h.GetColorIfPositiveFav(m.PercentageChangeBalanceActualTotal) :
                                                                         h.GetColorIfPositiveFav(m.PercentageChangeBalanceBudgetTotal),
                _ => null
            };
        }
        return null;
    }


    private string GetArrowTag(YearTotalsViewModel m)
    {
        decimal? percentChangeExact = GetPercentChangeOfTotal(selectedERAccountType, m);
        bool isFirstYearOfTimeline = m.Year == erDataForMultipleYears.SelectedYears[0];
        string rotationFactor = Helpers.GetDegreeOfRotation(percentChangeExact, isFirstYearOfTimeline);
        return rotationFactor == null ? "" : $"fas fa-arrow-up fa-rotate-{rotationFactor}";
    }


    private async void OnSelectStructureType(string inputVal)
    {
        await jsRuntime.InvokeAsync<string>("console.log", inputVal);
        if (inputVal != selectedStructureType)
        {
            SetDisabledERAccountTypes(inputVal);
            selectedStructureType = inputVal;
            await ReloadAccounts();
            StateHasChanged(); // Triggers updating of Dropdown with ER-Account-Types
        }
    }


    private async void OnSelectERAccountType(string inputVal)
    {
        await jsRuntime.InvokeAsync<string>("console.log", inputVal);
        if (inputVal != selectedERAccountType)
        {
            SetDisabledStructureTypes(inputVal);
            selectedERAccountType = inputVal;

            await ReloadAccounts();
            StateHasChanged();
        }
    }


    private async void OnSelectLevel(int inputVal)
    {
        await jsRuntime.InvokeAsync<string>("console.log", inputVal);

        if (inputVal != selectedLevel)
        {
            selectedLevel = inputVal;
            await ReloadAccounts();
            StateHasChanged();
        }
    }


    private async void OnSelectScenarioType(string inputVal)
    {
        await jsRuntime.InvokeAsync<string>("console.log", inputVal);

        if (inputVal != selectedScenarioType)
        {
            selectedScenarioType = inputVal;
            await ReloadAccounts();
        }
    }


    private void OnCreateNewScenario()
    {
        NavigationManager.NavigateTo("scenario");
    }


    private async Task ReloadAccounts()
    {
        if (selectedLevel > 0 &&
            Enum.TryParse(selectedStructureType, out StructureType structureType) &&
            Enum.TryParse(selectedERAccountType, out ERAccountType erAccountType))
        {
            await jsRuntime.InvokeAsync<string>
            ("console.log", $"StructureType: {selectedStructureType} ER-Account-Type: {selectedERAccountType}, Level: {selectedLevel}");

            this.isLoading = true;
            StateHasChanged();

            if (selectedScenarioType == ScenarioType.InputData.ToString())
            {
                var selectedYears = DataSvc.GetRelevantYears(Const.CurrentYear - 1, ScenarioType.InputData);
                erDataForMultipleYears = await DataSvc.FetchMainGroupsForTimelineEr(structureType,
                                                                                 erAccountType,
                                                                                 selectedYears,
                                                                                 selectedLevel);
            }
            else if (selectedScenarioType == ScenarioType.Scenario.ToString() && currentScenario != null)
            {
                var selectedYears = DataSvc.GetRelevantYears(currentScenario.FinancialYear, ScenarioType.Scenario);
                erDataForMultipleYears = ScenarioSvc.FetchMainGroupsForTimelineEr(currentScenario,
                                                                              structureType,
                                                                              erAccountType,
                                                                              selectedYears,
                                                                              selectedLevel);
            }
            this.isLoading = false;
            StateHasChanged();
        }
    }


    private void SetDisabledStructureTypes(string selectedERAccountType)
    {
        if (selectedERAccountType == ERAccountType.Balances.ToString())
        {
            disabledStructures.Add(StructureType.Subjects.ToString());
            disabledStructures.Add(StructureType.SubjectsThenFunctions.ToString());
            disabledStructures.Add(StructureType.FunctionsThenSubjects.ToString());
        }
        else
        {
            disabledStructures.Clear();
        }
    }

    private void SetDisabledERAccountTypes(string selectedStructureType)
    {
        if (selectedStructureType == StructureType.Subjects.ToString() ||
            selectedStructureType == StructureType.SubjectsThenFunctions.ToString() ||
            selectedStructureType == StructureType.FunctionsThenSubjects.ToString())
        {
            disabledERAccountTypes.Add(ERAccountType.Balances.ToString());
        }
        else
        {
            disabledERAccountTypes.Clear();
        }
    }

}
