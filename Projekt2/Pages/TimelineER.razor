@page "/timeline-er"
@inject DataServiceER DataSvc
@inject ScenarioServiceER ScenarioSvc
@inject HelpersService Helpers
@inject DropdownService DropdownSvc
@inject IJSRuntime jsRuntime

@using Projekt2.Constants



@if (IsLoading)
{
    <p>Page is loading...</p>
}

@if (IsLoading == false)
{
    <DropdownStr Label="Gliederungsart"
                 SelectedValue="@SelectedStructureType"
                 Items="DropdownSvc.StructureTypes"
                 DisabledKeys="DisabledStructures"
                 SelectionChanged="OnSelectStructureType" />

    <DropdownStr Label="Werte-Art"
                 SelectedValue="@SelectedERAccountType"
                 Items="DropdownSvc.ERAccountTypes"
                 DisabledKeys="DisabledERAccountTypes"
                 SelectionChanged="OnSelectERAccountType" />

    <DropdownInt Label="Level"
                 SelectedValue="@SelectedLevel"
                 Items="DropdownSvc.Levels"
                 SelectionChanged="OnSelectLevel" />


    @if (IsInScenarioMode)
    {
        <DropdownStr Label="Input-Daten vs. Szenario"
                     SelectedValue="@SelectedScenarioType"
                     Items="DropdownSvc.ScenarioTypes"
                     SelectionChanged="OnSelectScenarioType" />


        <button style="display: inline-block" @onclick="() => CreateNewScenario.InvokeAsync(null)">Create new scenario</button>
    }

    <hr />
}

@if (IsLoading == false && ERDataForMultipleYears != null)
{
    <div class="content-scroll-wrap">
        <div class="content-scroll">

            <table class="table">
                <thead>
                    <tr>
                        <th class="acc-th first-th">
                            Id / Konto-Name
                        </th>
                        @foreach (int y in ERDataForMultipleYears.SelectedYears)
                        {
                            <th class="acc-th">
                                @(y < Const.CurrentYear ? "Rg Jahr" :"Plan" ) @y
                            </th>
                        }
                    </tr>
                </thead>
                <tbody>

                    @foreach (AccountMultipleYearsViewModel acc in ERDataForMultipleYears.AccountsWithMultipleYears)
                    {
                        <CascadingValue Value="@SelectedStructureType" Name="SelectedStructureType">
                            <CascadingValue Value="@SelectedERAccountType" Name="SelectedERAccountType">
                                <CascadingValue Value="@SelectedScenarioType" Name="SelectedScenarioType">
                                    <AccountTimeline AccountMultipleYears="acc"
                                                     LevelInGui="1" />
                                </CascadingValue>
                            </CascadingValue>
                        </CascadingValue>
                    }
                    <tr>
                        <th class="first-col">
                            @(SelectedERAccountType == ERAccountType.Balances.ToString() ? "Gesamt-Differenz" : "Total")
                        </th>

                        @foreach (YearTotalsViewModel m in ERDataForMultipleYears.ListOfAccountYearTotals)
                        {
                            <th class="@(GetTotalCellClassValues(m, GetTotalValue(SelectedERAccountType, m)))">
                                @(Helpers.FormatDecimal(GetTotalValue(SelectedERAccountType, m)))
                            </th>
                        }
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
}

@code {

    bool IsLoading = true;
    bool IsInScenarioMode = false;

    [CascadingParameter(Name = "CurrentScenario")]
    Scenario CurrentScenario { get; set; }

    [Parameter]
    public EventCallback CreateNewScenario { get; set; }

    List<int> SelectedYears { get; set; }

    string SelectedStructureType = StructureType.Functions.ToString();
    string SelectedERAccountType = ERAccountType.Expenses.ToString();
    string SelectedScenarioType = null;
    int SelectedLevel;

    List<string> DisabledStructures = new List<string>();
    List<string> DisabledERAccountTypes = new List<string>();

    MultipleYearsViewModel ERDataForMultipleYears { get; set; }


    protected override async Task OnInitializedAsync()
    {
        SelectedScenarioType = ScenarioType.InputData.ToString();

        if (CurrentScenario != null)
        {
            SelectedScenarioType = ScenarioType.Scenario.ToString();
            IsInScenarioMode = true;
        }

        this.SelectedLevel = 1;
        SetDisabledStructureTypes(SelectedERAccountType);
        SetDisabledERAccountTypes(SelectedStructureType);

        await ReloadAccounts();

        IsLoading = false;
    }


    string GetTotalCellClassValues(YearTotalsViewModel m, decimal? value)
    {
        string result = $"total account-cell-{(m.Year < Const.CurrentYear ? "actual" : "budget")}";

        if (SelectedERAccountType == ERAccountType.Balances.ToString())
        {
            result += Helpers.IsPositive(value) ? " pos-value" : " neg-value";
        }
        return result;
    }


    decimal? GetTotalValue(string type, YearTotalsViewModel m)
    {
        if (Enum.TryParse(type, out ERAccountType eRAccountType))
        {
            return eRAccountType switch
            {
                ERAccountType.Expenses => m.Year < Const.CurrentYear ? m.ExpensesActualTotal : m.ExpensesBudgetTotal,
                ERAccountType.Income => m.Year < Const.CurrentYear ? m.IncomeActualTotal : m.IncomeBudgetTotal,
                ERAccountType.Balances => m.Year < Const.CurrentYear ? m.BalanceActualTotal : m.BalanceBudgetTotal,
                _ => null
            };
        }
        return null;
    }


    async void OnSelectStructureType(string inputVal)
    {
        await jsRuntime.InvokeAsync<string>("console.error", inputVal);
        if (inputVal != SelectedStructureType)
        {
            SetDisabledERAccountTypes(inputVal);
            SelectedStructureType = inputVal;
            await ReloadAccounts();
            StateHasChanged(); // Triggers updating of Dropdown with ER-Account-Types
        }
    }


    async void OnSelectERAccountType(string inputVal)
    {
        await jsRuntime.InvokeAsync<string>("console.error", inputVal);
        if (inputVal != SelectedERAccountType)
        {
            SetDisabledStructureTypes(inputVal);
            SelectedERAccountType = inputVal;

            await ReloadAccounts();
            StateHasChanged();
        }
    }


    async void OnSelectLevel(int inputVal)
    {
        await jsRuntime.InvokeAsync<string>("console.error", inputVal);

        if (inputVal != SelectedLevel)
        {
            SelectedLevel = inputVal;
            await ReloadAccounts();
            StateHasChanged();
        }
    }


    async void OnSelectScenarioType(string inputVal)
    {
        await jsRuntime.InvokeAsync<string>("console.error", inputVal);

        if (inputVal != SelectedScenarioType)
        {
            SelectedScenarioType = inputVal;
            await ReloadAccounts();
        }
    }


    private async Task ReloadAccounts()
    {
        var structureT = SelectedStructureType;
        var accType = SelectedERAccountType;


        await jsRuntime.InvokeAsync<string>
        ("console.error", $"StructureType: {structureT} ER-Account-Type: {accType}, Level: {SelectedLevel}");

        if (SelectedLevel > 0 &&
            Enum.TryParse(structureT, out StructureType structureType) &&
            Enum.TryParse(accType, out ERAccountType erAccountType))
        {
            this.IsLoading = true;
            StateHasChanged();

            if (SelectedScenarioType == ScenarioType.InputData.ToString())
            {
                this.SelectedYears = DataSvc.GetRelevantYears(Const.CurrentYear - 1, ScenarioType.InputData);
                ERDataForMultipleYears = await DataSvc.FetchMainGroupsForTimelineEr(structureType,
                                                                                 erAccountType,
                                                                                 SelectedYears,
                                                                                 SelectedLevel);
            }
            else if (SelectedScenarioType == ScenarioType.Scenario.ToString() && CurrentScenario != null)
            {
                this.SelectedYears = DataSvc.GetRelevantYears(CurrentScenario.FinancialYear, ScenarioType.Scenario);
                ERDataForMultipleYears = ScenarioSvc.FetchMainGroupsForTimelineEr(CurrentScenario,
                                                                              structureType,
                                                                              erAccountType,
                                                                              SelectedYears,
                                                                              SelectedLevel);
            }

            this.IsLoading = false;
            StateHasChanged();
        }
    }


    private void SetDisabledStructureTypes(string selectedERAccountType)
    {
        if (selectedERAccountType == ERAccountType.Balances.ToString())
        {
            DisabledStructures.Add(StructureType.Subjects.ToString());
        }
        else
        {
            DisabledStructures.Clear();
        }
    }

    private void SetDisabledERAccountTypes(string selectedStructureType)
    {
        if (selectedStructureType == StructureType.Subjects.ToString())
        {
            DisabledERAccountTypes.Add(ERAccountType.Balances.ToString());
        }
        else
        {
            DisabledERAccountTypes.Clear();
        }
    }

}
