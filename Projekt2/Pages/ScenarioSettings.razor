@page "/scenario/settings/{financialYear}"
@inject DropdownService DropdownSvc
@inject NavigationManager NavigationManager


@if (isInputModeActive)
{
    <h3>Szenario Generator</h3>
    <div style="height: 25px;"></div>

    <h5>Neuen Parameter festlegen</h5>
    <div style="height: 10px;"></div>
    <div class="black-border-chip scenario-content-width">
        <div>
            <label style="margin-right: 10px">
                Beschreibung
                <input class="form-control"
                       placeholder="Parameter-Name"
                       type="text"
                       @bind="modificationDescription" />
            </label>
            <label style="margin-right: 10px">
                Sachgr.-Nr.
                <input class="form-control"
                       style="width: 120px;"
                       type="text"
                       placeholder="Bsp. 3200"
                       value="@subjectAccountId"
                       @oninput="(x) => OnSubjectIdChange(x)" />
            </label>
            <label style="margin-right: 10px">
                Funktionsgr.-Nr.
                <input class="form-control"
                       style="width: 120px"
                       type="text"
                       placeholder="Bsp. 1000"
                       value="@parentFunctionAccountId"
                       @oninput="(x) => OnFunctionGroupIdChange(x)" />
            </label>
            <label>
                Prozent &Delta;
                <input class="form-control"
                       style="width: 100px"
                       type="number"
                       @bind="percentChange" />
            </label>
        </div>
        @if (isAccountTypeMenuVisible)
        {
            <div>
                <DropdownStr Label="Kontoart"
                             SelectedValue="@selectedErAccountType"
                             Items="DropdownSvc.ScenarioAccountTypes"
                             SelectionChanged="(x) => { selectedErAccountType = x; }" />
            </div>
        }

    <div style="margin-top: 20px;">
        <input class="btn btn-dark btn-sm"               
               type="button"
               value="Hinzufügen"
               @onclick="() => OnSaveModificationUnit()" />

        <input class="btn btn-outline-dark btn-sm"
               type="button"
               value="Zurücksetzen"
               @onclick="() => ResetModificationUnitFields()" />
    </div>

        

        @if (errorMessages?.Count > 0)
        {
            <div style="height: 10px;"></div>
            <ul>
                @foreach (var error in errorMessages)
                {
                    <li style="color: red;">
                        @error
                    </li>
                }
            </ul>
        }
    </div>

    @if (currentScenario?.ModificationUnits?.Count > 0)
    {
        <div style="height: 35px;"></div>
        <h5>Gespeicherte Parameter</h5>
        <div style="height: 10px;"></div>

        <table class="table table-striped scenario-content-width">
            <thead>
                <tr style="font-size: 0.9rem">
                    <th class="align-left">
                        Titel
                    </th>
                    <th class="align-left">
                        SG-Nr.
                    </th>
                    <th class="align-left">
                        FG-Nr.
                    </th>
                    <th class="align-left">
                        Beschreibung
                    </th>
                    <th class="align-left">
                    </th>
                </tr>
            </thead>
            <tbody>

                @foreach (var mUnit in currentScenario.ModificationUnits)
                {
                <tr>
                    <td class="align-left">
                        @(mUnit.Title)
                    </td>
                    <td class="align-left">
                        @(mUnit.AccountParams.SubjectId)
                    </td>
                    <td class="align-left">
                        @(mUnit.AccountParams.IdOfParentFunctionGroup)
                    </td>
                    <td class="align-left">
                        @(mUnit.ModificationOperation.Description)
                    </td>
                    <td class="param-removal-cell align-center"
                        @onclick="() => RemoveParam(mUnit)">
                        X
                    </td>
                </tr>
                }
            </tbody>
        </table>

        <div class="scenario-content-width">
            <div style="height: 10px;"></div>
            <input class="btn btn-success"
                   style="float:right"
                   type="button"
                   value="Generieren"
                   @onclick="() => OnExecuteCalculations()" />
        </div>
    }
}


@if (isInputModeActive == false)
{
    <CascadingValue Value="@currentScenario" Name="CurrentScenario">
        <TimelineER />
    </CascadingValue>
}


@code {

    [Parameter]
    public string FinancialYear { get; set; }

    Scenario currentScenario = null;

    bool isInputModeActive = true;
    bool isAccountTypeMenuVisible = false;

    int parameterCount = 1;

    List<string> errorMessages = null;

    string modificationDescription = "Parameter 1";
    string selectedErAccountType = ERAccountType.Expenses.ToString();
    string subjectAccountId = null;
    string parentFunctionAccountId = null;
    decimal percentChange = 0;


    protected override async Task OnInitializedAsync()
    {
        bool isValidYear = int.TryParse(FinancialYear, out int fYear);

        if (isValidYear)
        {
            currentScenario = new Scenario(fYear);
        }
        else
        {
            NavigationManager.NavigateTo("scenario");
        }
    }


    private void OnSubjectIdChange(ChangeEventArgs e)
    {
        subjectAccountId = (string)e.Value;

        if (string.IsNullOrEmpty(subjectAccountId) && string.IsNullOrEmpty(parentFunctionAccountId) == false)
        {
            isAccountTypeMenuVisible = true;
        }
        else
        {
            isAccountTypeMenuVisible = false;
        }
        StateHasChanged();
    }

    private void OnFunctionGroupIdChange(ChangeEventArgs e)
    {
        parentFunctionAccountId = (string)e.Value;

        if (string.IsNullOrEmpty(parentFunctionAccountId) == false && string.IsNullOrEmpty(subjectAccountId))
        {
            isAccountTypeMenuVisible = true;
        }
        else
        {
            isAccountTypeMenuVisible = false;
        }
        StateHasChanged();
    }

    private void OnSaveModificationUnit()
    {
        // Validate Inputs:
        errorMessages = CollectErrors();

        if (errorMessages.Count > 0)
        {
            return;
        }

        // Assemble Modification-Unit:

        if (string.IsNullOrEmpty(subjectAccountId) == false || string.IsNullOrEmpty(parentFunctionAccountId) == false)
        {
            if (string.IsNullOrEmpty(subjectAccountId))
            {
                Enum.TryParse(selectedErAccountType, out ERAccountType erAccType);

                if (erAccType == ERAccountType.Expenses)
                {
                    IAccountParams parameters = new AccountParams
                    {
                        SubjectId = "3",
                        IdOfParentFunctionGroup = parentFunctionAccountId
                    };

                    IModificationOperation operation = new ExpensesChangePercent(percentChange);
                    currentScenario.AddModificationUnit(new ModificationUnit(modificationDescription, parameters, operation));
                }

                if (erAccType == ERAccountType.Income)
                {
                    IAccountParams parameters = new AccountParams
                    {
                        SubjectId = "4",
                        IdOfParentFunctionGroup = parentFunctionAccountId
                    };

                    IModificationOperation operation = new IncomesChangePercent(percentChange);
                    currentScenario.AddModificationUnit(new ModificationUnit(modificationDescription, parameters, operation));
                }
            }
            else
            {
                bool isExpensesAccount = subjectAccountId.Substring(0, 1) == "3";

                if (isExpensesAccount)
                {
                    IAccountParams parameters = new AccountParams
                    {
                        SubjectId = subjectAccountId,
                        IdOfParentFunctionGroup = parentFunctionAccountId
                    };
                    IModificationOperation operation = new ExpensesChangePercent(percentChange);
                    currentScenario.AddModificationUnit(new ModificationUnit(modificationDescription, parameters, operation));
                }
                else
                {
                    IAccountParams parameters = new AccountParams
                    {
                        SubjectId = subjectAccountId,
                        IdOfParentFunctionGroup = parentFunctionAccountId
                    };
                    IModificationOperation operation = new IncomesChangePercent(percentChange);
                    currentScenario.AddModificationUnit(new ModificationUnit(modificationDescription, parameters, operation));
                }
            }

            ResetModificationUnitFields();

            parameterCount++;
            modificationDescription = $"Parameter {parameterCount}";
            StateHasChanged();
        }
    }


    private List<string> CollectErrors()
    {
        List<string> errors = new List<string>();

        if (percentChange == 0)
        {
            errors.Add("Die prozentuale Veränderung darf nicht 0 betragen.");
        }
        if (string.IsNullOrEmpty(modificationDescription))
        {
            errors.Add("Beschreibung fehlt.");
        }
        if (string.IsNullOrEmpty(subjectAccountId) && string.IsNullOrEmpty(parentFunctionAccountId))
        {
            errors.Add("Sachgruppen- und/oder Funktionsgruppen-Konto-Nr. muss angegeben werden.");
        }
        if (string.IsNullOrEmpty(subjectAccountId) == false)
        {
            if (subjectAccountId.Substring(0, 1) != "3" &&
                subjectAccountId.Substring(0, 1) != "4")
            {
                errors.Add("Die Sachgruppen-Nummer muss mit 3 oder 4 beginnen.");
            }
            if (subjectAccountId.Length > 4)
            {
                errors.Add("Die Sachgruppen-Nummer darf nicht mehr als 4 Ziffern enthalten.");
            }
            if (Regex.IsMatch(subjectAccountId, @"^\d+$") == false)
            {
                errors.Add("Die Sachgruppen-Nummer darf nur Nummern enthalten.");
            }
        }
        if (string.IsNullOrEmpty(parentFunctionAccountId) == false)
        {
            if (parentFunctionAccountId.Length > 4)
            {
                errors.Add("Die Funktionsgruppen-Nummer darf nicht mehr als 4 Ziffern enthalten.");
            }
            if (Regex.IsMatch(parentFunctionAccountId, @"^\d+$") == false)
            {
                errors.Add("Die Funktionsgruppen-Nummer darf nur Nummern enthalten.");
            }
        }
        return errors;
    }

    private void RemoveParam(ModificationUnit mUnit)
    {
        currentScenario.ModificationUnits.Remove(mUnit);
    }

    private void OnExecuteCalculations()
    {
        ResetModificationUnitFields();
        isInputModeActive = false;
    }

    private void ResetModificationUnitFields()
    {
        modificationDescription = null;
        errorMessages = null;
        subjectAccountId = null;
        parentFunctionAccountId = null;
        percentChange = 0;
        selectedErAccountType = ERAccountType.Expenses.ToString();
    }

    private void ResetAllValues()
    {
        ResetModificationUnitFields();
        currentScenario = null;
        parameterCount = 1;
        modificationDescription = "Parameter 1";
    }

}
