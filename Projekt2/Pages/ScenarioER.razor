
@page "/scenario"
@inject DropdownService DropdownSvc

@if (IsInputModeActive && IsFinancialYearSet == false)
{
    <h3>Scenario</h3>
    <input type="number" @bind="FinancialYear" />
    <input type="button" value="Speichere Finanzjahr" @onclick="() => OnSetFinancialYear()" />
}

@if (IsInputModeActive && IsFinancialYearSet)
{
    <div>
        <input type="text" placeholder="Subject: Income Account Id" @bind="SubjectAccountId" />
    </div>
    <div>
        <input type="text" placeholder="Function: Parent Account Id" @bind="ParentFunctionAccountId" />
    </div>
    <div>
        <label>
            Percent increase:
            <input type="number" @bind="PercentIncrease" />
        </label>
    </div>
    <div>
        <DropdownStr Label="Kontoart"
                     SelectedValue="@SelectedErAccountType"
                     Items="DropdownSvc.ScenarioAccountTypes"
                     SelectionChanged="(x) => { SelectedErAccountType = x; }" />
    </div>


    <input type="button" value="Speichere Input" @onclick="() => OnSaveModificationUnit()" />

    <input type="button" value="Wechsle zur Resultate-Ansicht" @onclick="() => OnCalculateScenario()" />
}


@if (IsInputModeActive == false)
{
    <CascadingValue Value="@CurrentScenario" Name="CurrentScenario">
        <TimelineER CreateNewScenario="() => OnCreateNewScenario()" />
    </CascadingValue>
}


@code {

    Scenario CurrentScenario = null;
    bool IsInputModeActive = true;
    bool IsFinancialYearSet = false;

    int FinancialYear = 2016;

    string SelectedErAccountType = ERAccountType.Expenses.ToString();
    string SubjectAccountId = null;
    string ParentFunctionAccountId = null;
    decimal PercentIncrease = 0;

    protected override async Task OnInitializedAsync()
    {

    }


    public void OnSetFinancialYear()
    {
        if (FinancialYear > 2000)
        {
            CurrentScenario = new Scenario(FinancialYear);
            IsFinancialYearSet = true;
        }
    }


    public void OnSaveModificationUnit()
    {
        if (PercentIncrease != 0 && SelectedErAccountType != null &&
            (string.IsNullOrEmpty(SubjectAccountId) == false || string.IsNullOrEmpty(ParentFunctionAccountId) == false))
        {
            AccountParams parameters = new AccountParams
            {
                SubjectId = SubjectAccountId,
                IdOfParentFunctionGroup = ParentFunctionAccountId
            };

            IModificationOperation operation = null;

            if (SelectedErAccountType == ERAccountType.Expenses.ToString())
            {
                operation = new ExpensesChangePercent(PercentIncrease);
            }
            else
            {
                operation = new IncomesChangePercent(PercentIncrease);
            }

            CurrentScenario.AddModificationUnit(new ModificationUnit(parameters, operation));
            ResetModificationUnitFields();
        }
    }

    public void OnCalculateScenario()
    {

        IsInputModeActive = false;
    }

    private void OnCreateNewScenario()
    {
        ResetAllValues();
        IsInputModeActive = true;
        StateHasChanged();
    }


    public void ResetModificationUnitFields()
    {
        PercentIncrease = 0;
        SubjectAccountId = null;
        ParentFunctionAccountId = null;
        SelectedErAccountType = ERAccountType.Expenses.ToString();
    }

    public void ResetAllValues()
    {
        CurrentScenario = null;
        IsFinancialYearSet = false;
        FinancialYear = 2016;
        ResetModificationUnitFields();
    }


}
