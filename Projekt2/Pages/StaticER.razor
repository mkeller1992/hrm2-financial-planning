@page "/static-er"
@inject DataServiceER DataSvc
@inject HelpersService Helpers
@inject DropdownService DropdownSvc
@inject IJSRuntime jsRuntime

@using Projekt2.Constants


@if (isLoading)
{
    <p>Page is loading...</p>
}

@if (isLoading == false)
{

    <DropdownStr Label="Gliederungsart"
                 SelectedValue="@selectedStructureType"
                 Items="DropdownSvc.StructureTypes"
                 SelectionChanged="OnSelectStructureType" />

    <DropdownInt Label="Jahr"
                 SelectedValue="@selectedYear"
                 Items="DropdownSvc.Years(relevantYears)"
                 SelectionChanged="OnSelectYear" />

    <DropdownInt Label="Level"
                 SelectedValue="@selectedLevel"
                 Items="DropdownSvc.Levels"
                 SelectionChanged="OnSelectLevel" />

    <hr />

}

@if (isLoading == false && erOfYear?.Accounts?.Count > 0)
{
    <div class="content-scroll-wrap">
        <div class="content-scroll">
            <table class="table account-table-static">

                <!-- Column Titles -->

                <thead>
                    <tr>
                        <th class="acc-th first-col">
                            Id / Konto-Name
                        </th>
                        @{
                            string optionalClassTag = IsBudgetYear() ? "" : "account-cell-actual";

                            <th class="acc-th @optionalClassTag">
                                @(IsBudgetYear() ? "Plan Aufwand" : "Aufwand")
                            </th>
                            <th class="acc-th @optionalClassTag">
                                Diff.A.
                            </th>
                            <th class="acc-th @optionalClassTag">
                                @(IsBudgetYear() ? "Plan Ertrag" : "Ertrag")
                            </th>
                            <th class="acc-th @optionalClassTag">
                                Diff.E.
                            </th>
                        }
                        @if (IsFunctionGroupSelected())
                        {
                            <th class="acc-th @optionalClassTag">
                                @(IsBudgetYear() ? "Plan Saldo" : "Saldo")
                            </th>
                            <th class="acc-th @optionalClassTag">
                                Diff.S.
                            </th>
                        }
                    </tr>
                </thead>

                <!-- Rows with yearly-values -->

                <tbody>
                    @foreach (AccountYearViewModel acc in erOfYear.Accounts)
                    {
                        <CascadingValue Value="@selectedStructureType" Name="SelectedStructureType">
                            <AccountStatic AccountYear="acc"
                                           LevelInGui="1" />
                        </CascadingValue>
                    }

                    <!-- Row with totals -->

                    <tr>
                        <th class="first-col">
                            Total
                        </th>
                        @{
                            string classSuffix = IsBudgetYear() ? "budget" : "actual";

                            <th class="total account-cell-@classSuffix">
                                @(Helpers.FormatDecimal(expensesTotal))
                            </th>
                            <th class="total account-cell-@classSuffix @(Helpers.GetColorIfNegativeFav(percentChangeExpensesTotal, 0))">
                                @(Helpers.FormatPercentage(percentChangeExpensesTotal))
                            </th>
                            <th class="total account-cell-@classSuffix">
                                @(Helpers.FormatDecimal(incomeTotal))
                            </th>
                            <th class="total account-cell-@classSuffix @(Helpers.GetColorIfPositiveFav(percentChangeIncomeTotal, 0))">
                                @(Helpers.FormatPercentage(percentChangeIncomeTotal))
                            </th>

                            @if (IsFunctionGroupSelected())
                            {
                                <th class="total account-cell-@classSuffix">
                                    @(Helpers.FormatDecimal(balanceTotal))
                                </th>
                                <th class="total account-cell-@classSuffix @(Helpers.GetColorIfPositiveFav(percentChangeBalanceTotal, 0))">
                                    @(Helpers.FormatPercentage(percentChangeBalanceTotal))
                                </th>
                            }
                        }
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
}


@code {

    bool isLoading = true;

    YearViewModel erOfYear = null;
    int selectedYear;
    List<int> relevantYears;
    int selectedLevel;
    string selectedStructureType = null;

    // Totals:
    decimal? expensesTotal = null;
    decimal? percentChangeExpensesTotal = null;
    decimal? incomeTotal = null;
    decimal? percentChangeIncomeTotal = null;
    decimal? balanceTotal = null;
    decimal? percentChangeBalanceTotal = null;


    protected override async Task OnInitializedAsync()
    {
        selectedYear = Const.CurrentYear;
        selectedStructureType = StructureType.Functions.ToString();
        selectedLevel = 1;
        relevantYears = DataSvc.GetRelevantYears(Const.CurrentYear - 1, ScenarioType.InputData);

        ReloadAccounts();
        isLoading = false;
    }


    private void InitializeTotals()
    {
        if (IsBudgetYear())
        {
            expensesTotal = erOfYear.AccountYearTotals.ExpensesBudgetTotal;
            percentChangeExpensesTotal = erOfYear.AccountYearTotals.PercentageChangeExpensesBudgetTotal;
            incomeTotal = erOfYear.AccountYearTotals.IncomeBudgetTotal;
            percentChangeIncomeTotal = erOfYear.AccountYearTotals.PercentageChangeIncomeBudgetTotal;
            balanceTotal = erOfYear.AccountYearTotals.BalanceBudgetTotal;
            percentChangeBalanceTotal = erOfYear.AccountYearTotals.PercentageChangeBalanceBudgetTotal;
        }
        else {
            expensesTotal = erOfYear.AccountYearTotals.ExpensesActualTotal;
            percentChangeExpensesTotal = erOfYear.AccountYearTotals.PercentageChangeExpensesActualTotal;
            incomeTotal = erOfYear.AccountYearTotals.IncomeActualTotal;
            percentChangeIncomeTotal = erOfYear.AccountYearTotals.PercentageChangeIncomeActualTotal;
            balanceTotal = erOfYear.AccountYearTotals.BalanceActualTotal;
            percentChangeBalanceTotal = erOfYear.AccountYearTotals.PercentageChangeBalanceActualTotal;
        }
    }


    private bool IsFunctionGroupSelected()
    {
        return selectedStructureType == StructureType.Functions.ToString() ||
               selectedStructureType == StructureType.FunctionsThenSubjects.ToString();
    }


    private bool IsBudgetYear()
    {
        return selectedYear >= Const.CurrentYear;
    }


    async void OnSelectYear(int inputVal)
    {
        await jsRuntime.InvokeAsync<string>("console.log", inputVal);

        if (inputVal != selectedYear)
        {
            selectedYear = inputVal;
            ReloadAccounts();
        }
    }


    async void OnSelectLevel(int inputVal)
    {
        await jsRuntime.InvokeAsync<string>("console.log", inputVal);

        if (inputVal != selectedLevel)
        {
            selectedLevel = inputVal;
            ReloadAccounts();
        }
    }


    async void OnSelectStructureType(string inputVal)
    {
        await jsRuntime.InvokeAsync<string>("console.log", inputVal);
        if (inputVal != selectedStructureType)
        {
            selectedStructureType = inputVal;
            ReloadAccounts();
        }
    }


    async void OnSelectAccountRange(string inputVal)
    {
        await jsRuntime.InvokeAsync<string>("console.log", inputVal);
        ReloadAccounts();
    }


    async void ReloadAccounts()
    {
        await jsRuntime.InvokeAsync<string>("console.log", $"StructureType: {selectedStructureType}, Year: {selectedYear}, Level: {selectedLevel}");

        if (selectedYear >= Const.OldestFinanceYear &&
            selectedLevel > 0 &&
            Enum.TryParse(selectedStructureType, out StructureType structureT))
        {
            this.isLoading = true;
            StateHasChanged();
            erOfYear = await DataSvc.FetchMainGroupsForYearlyER(structureT,
                                                            selectedYear,
                                                            selectedLevel);
            InitializeTotals();

            this.isLoading = false;
            StateHasChanged();
        }
    }


}
