@page "/static-er"
@inject DataServiceER DataSvc
@inject HelpersService Helpers
@inject DropdownService DropdownSvc
@inject IJSRuntime jsRuntime


@if (IsLoading)
{
    <p>Page is loading...</p>
}

@if (IsLoading == false)
{

    <DropdownStr Label="Gliederungsart"
                 SelectedValue="@SelectedStructureType"
                 Items="DropdownSvc.StructureTypes"
                 SelectionChanged="OnSelectStructureType" />

    <DropdownInt Label="Jahr"
                 SelectedValue="@SelectedYear"
                 Items="DropdownSvc.Years(RelevantYears)"
                 SelectionChanged="OnSelectYear" />

    <DropdownInt Label="Level"
                 SelectedValue="@SelectedLevel"
                 Items="DropdownSvc.Levels"
                 SelectionChanged="OnSelectLevel" />

    <DropdownStr Label="Umfang"
                 SelectedValue="@SelectedAccountRange"
                 Items="DropdownSvc.AccountRanges"
                 SelectionChanged="OnSelectAccountRange" />

    <hr />

}

@if (IsLoading == false && ERofYear != null && ERofYear.Accounts != null)
{
    <table class="table account-table-static">
        <thead>
            <tr>
                <th class="acc-th">
                    Id / Konto-Name
                </th>
                @if (SelectedYear >= DataSvc.CURRENT_YEAR)
                {
                    <th class="acc-th account-cell-budget">
                        Budget. Aufwand
                    </th>
                    <th class="acc-th account-cell-budget">
                        Budget. Ertrag
                    </th>
                    @if (SelectedStructureType == StructureType.Functions.ToString())
                    {
                        <th class="acc-th account-cell-budget">
                            Budget. Saldo
                        </th>
                    }
                }
                else if (SelectedYear < DataSvc.CURRENT_YEAR)
                {
                    <th class="acc-th account-cell-actual">
                        Aufwand
                    </th>
                    <th class="acc-th account-cell-actual">
                        Ertrag
                    </th>
                    @if (SelectedStructureType == StructureType.Functions.ToString())
                    {
                        <th class="acc-th account-cell-actual">
                            Saldo
                        </th>
                    }
                }
            </tr>
        </thead>
        <tbody>

            @foreach (AccountYearViewModel acc in ERofYear.Accounts)
            {
                <CascadingValue Value="@SelectedStructureType" Name="SelectedStructureType">
                    <CascadingValue Value="@SelectedAccountRange" Name="SelectedAccountRange">
                        <AccountStatic AccountYear="acc"
                                       LevelInGui="1" />
                    </CascadingValue>
                </CascadingValue>
            }
            <tr>
                <th>
                    Total
                </th>

                @if (SelectedYear >= DataSvc.CURRENT_YEAR)
                {
                    <th class="account-cell-budget">
                        @(Helpers.FormatDecimal(ERofYear.AccountYearTotals.ExpensesBudgetTotal))
                    </th>
                    <th class="account-cell-budget">
                        @(Helpers.FormatDecimal(ERofYear.AccountYearTotals.IncomeBudgetTotal))
                    </th>
                    @if (SelectedStructureType == StructureType.Functions.ToString())
                    {
                        <th class="account-cell-budget
                            @(Helpers.IsPositive(ERofYear.AccountYearTotals.BalanceBudgetTotal) ? "pos-value" : "neg-value")">
                            @(Helpers.FormatDecimal(ERofYear.AccountYearTotals.BalanceBudgetTotal))
                        </th>
                    }
                }
                else if (SelectedYear < DataSvc.CURRENT_YEAR)
                {
                    <th class="account-cell-actual">
                        @(Helpers.FormatDecimal(ERofYear.AccountYearTotals.ExpensesActualTotal))
                    </th>
                    <th class="account-cell-actual">
                        @(Helpers.FormatDecimal(ERofYear.AccountYearTotals.IncomeActualTotal))
                    </th>
                    @if (SelectedStructureType == StructureType.Functions.ToString())
                    {
                        <th class="account-cell-actual
                            @(Helpers.IsPositive(ERofYear.AccountYearTotals.BalanceActualTotal) ? "pos-value" : "neg-value")">
                            @(Helpers.FormatDecimal(ERofYear.AccountYearTotals.BalanceActualTotal))
                        </th>
                    }
                }
            </tr>
        </tbody>
    </table>
}


@code {

    bool IsLoading = true;

    string SelectedStructureType = StructureType.Functions.ToString();
    string SelectedAccountRange = AccountRange.UsedAccounts.ToString();

    int SelectedYear;
    int SelectedLevel;
    List<int> RelevantYears;

    YearViewModel ERofYear { get; set; }


    protected override async Task OnInitializedAsync()
    {
        SelectedYear = DataSvc.CURRENT_YEAR;
        SelectedLevel = 1;
        RelevantYears = DataSvc.GetRelevantYears(DataSvc.CURRENT_YEAR);

        ReloadAccounts(SelectedStructureType, SelectedYear, SelectedLevel, SelectedAccountRange);
        IsLoading = false;
    }


    async void OnSelectYear(int inputVal)
    {
        await jsRuntime.InvokeAsync<string>("console.error", inputVal);

        if (inputVal != SelectedYear)
        {
            SelectedYear = inputVal;
            ReloadAccounts(SelectedStructureType, SelectedYear, SelectedLevel, SelectedAccountRange);
        }
    }

    async void OnSelectLevel(int inputVal)
    {
        await jsRuntime.InvokeAsync<string>("console.error", inputVal);

        if (inputVal != SelectedLevel)
        {
            SelectedLevel = inputVal;
            ReloadAccounts(SelectedStructureType, SelectedYear, SelectedLevel, SelectedAccountRange);
        }
    }

    async void OnSelectStructureType(string inputVal)
    {
        await jsRuntime.InvokeAsync<string>("console.error", inputVal);
        if (inputVal != SelectedStructureType)
        {
            SelectedStructureType = inputVal;
            ReloadAccounts(SelectedStructureType, SelectedYear, SelectedLevel, SelectedAccountRange);
        }
    }

    async void OnSelectAccountRange(string inputVal)
    {
        await jsRuntime.InvokeAsync<string>("console.error", inputVal);
        if (inputVal != SelectedAccountRange)
        {
            SelectedAccountRange = inputVal;
            ReloadAccounts(SelectedStructureType, SelectedYear, SelectedLevel, SelectedAccountRange);
        }
    }

    async void ReloadAccounts(string structureType, int year, int level, string range)
    {
        await jsRuntime.InvokeAsync<string>("console.error", $"StructureType: {structureType}, Year: {year}, Level: {level}");

        if (year > 2000 &&
            level > 0 &&
            Enum.TryParse(structureType, out StructureType structureT) &&
            Enum.TryParse(range, out AccountRange accountRange))
        {
            this.IsLoading = true;
            StateHasChanged();
            ERofYear = await DataSvc.FetchERAccountGroupsForYear(structureT,
                                                                SelectedYear,
                                                                SelectedLevel,
                                                                accountRange == AccountRange.AllAccounts);
            this.IsLoading = false;
            StateHasChanged();
        }
    }


}
