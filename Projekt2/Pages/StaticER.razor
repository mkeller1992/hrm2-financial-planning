@page "/static-er"
@inject DataServiceER DataSvc
@inject HelpersService Helpers
@inject IJSRuntime jsRuntime


@if (IsLoading)
{
    <p>Page is loading...</p>
}

@if (IsLoading == false && YearsAvailable != null && LevelsAvailable != null)
{
    <select id="structureTypes"
            class="form-control standard-dropdown"
            @onchange="(e) => OnSelectStructureType(e.Value.ToString())">
        @foreach (StructureType structureType in Enum.GetValues(typeof(StructureType)))
        {
            <option value="@(structureType)"
                    selected="@(structureType == SelectedStructureType)"
                    disabled="@(structureType == StructureType.None)">
                @(DropdownLabels.GetLabelFor(structureType))
            </option>
        }
    </select>

    <select id="years"
            class="form-control standard-dropdown"
            @onchange="OnSelectYear">
        <option value="-1"
                disabled>
            Jahr
        </option>
        @foreach (var year in YearsAvailable)
        {
            <option value="@year"
                    selected="@(year == SelectedYear)">
                @year
            </option>
        }
    </select>

    <select id="levels"
            class="form-control standard-dropdown"
            @onchange="OnSelectLevel">
        <option value="-1"
                disabled>
            Level
        </option>
        @foreach (var level in LevelsAvailable)
        {
            <option value="@level"
                    selected="@(level == SelectedLevel)">
                @level
            </option>
        }
    </select>

    <select id="accountRanges"
            class="form-control standard-dropdown"
            @onchange="(e) => OnSelectAccountRange(e.Value.ToString())">
        @foreach (AccountRange accRange in Enum.GetValues(typeof(AccountRange)))
        {
            <option value="@(accRange)"
                    selected="@(accRange == SelectedAccountRange)"
                    disabled="@(accRange == AccountRange.None)">
                @(DropdownLabels.GetLabelFor(accRange))
            </option>
        }
    </select>

    <hr />

}

@if (IsLoading == false && ERofYear != null && ERofYear.Accounts != null)
{
    <table class="table account-table-static">
        <thead>
            <tr>
                <th>
                    Id / Konto-Name
                </th>
                @if (SelectedYear >= DataSvc.CURRENT_YEAR)
                {
                    <th class="acc-th account-cell-budget">
                        Budget. Aufwand
                    </th>
                    <th class="acc-th account-cell-budget">
                        Budget. Ertrag
                    </th>
                    @if (SelectedStructureType == StructureType.Functions)
                    {
                        <th class="acc-th account-cell-budget">
                            Budget. Saldo
                        </th>
                    }
                }
                else if (SelectedYear < DataSvc.CURRENT_YEAR)
                {
                    <th class="acc-th account-cell-actual">
                        Aufwand
                    </th>
                    <th class="acc-th account-cell-actual">
                        Ertrag
                    </th>
                    @if (SelectedStructureType == StructureType.Functions)
                    {
                        <th class="acc-th account-cell-actual">
                            Saldo
                        </th>
                    }
                }
            </tr>
        </thead>
        <tbody>

            @foreach (AccountYearViewModel acc in ERofYear.Accounts)
            {
                <CascadingValue Value="@SelectedStructureType" Name="SelectedStructureType">
                    <CascadingValue Value="@SelectedAccountRange" Name="SelectedAccountRange">
                        <AccountStatic AccountYear="acc"
                                       LevelInGui="1" />
                    </CascadingValue>
                </CascadingValue>
            }
        <tr>
            <th>
                Total
            </th>

            @if (SelectedYear >= DataSvc.CURRENT_YEAR)
            {
                <th class="account-cell-budget">
                    @(Helpers.FormatDecimal(ERofYear.AccountYearTotals.ExpensesBudgetTotal))
                </th>
                <th class="account-cell-budget">
                    @(Helpers.FormatDecimal(ERofYear.AccountYearTotals.IncomeBudgetTotal))
                </th>
                @if (SelectedStructureType == StructureType.Functions)
                {
                    <th class="account-cell-budget">
                        @(Helpers.FormatDecimal(ERofYear.AccountYearTotals.BalanceBudgetTotal))
                    </th>
                }
            }
            else if (SelectedYear < DataSvc.CURRENT_YEAR)
            {
                <th class="account-cell-actual">
                    @(Helpers.FormatDecimal(ERofYear.AccountYearTotals.ExpensesActualTotal))
                </th>
                <th class="account-cell-actual">
                    @(Helpers.FormatDecimal(ERofYear.AccountYearTotals.IncomeActualTotal))
                </th>
                @if (SelectedStructureType == StructureType.Functions)
                {
                    <th class="account-cell-actual">
                        @(Helpers.FormatDecimal(ERofYear.AccountYearTotals.BalanceActualTotal))
                    </th>
                }
            }
        </tr>
        </tbody>
    </table>
}


@code {

    bool IsLoading = false;

    List<int> YearsAvailable { get; set; }
    List<int> LevelsAvailable { get; set; }

    StructureType SelectedStructureType = StructureType.None;
    AccountRange SelectedAccountRange = AccountRange.None;
    int SelectedYear = -1;
    int SelectedLevel = -1;

    YearViewModel ERofYear { get; set; }


    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        LevelsAvailable = DataSvc.GetAvailableLevels();
        YearsAvailable = DataSvc.GetRelevantYears(DataSvc.CURRENT_YEAR);
        IsLoading = false;
    }


    async void OnSelectYear(ChangeEventArgs e)
    {
        var newlySelectedYear = int.Parse(e.Value.ToString());
        await jsRuntime.InvokeAsync<string>("console.error", newlySelectedYear);

        if (newlySelectedYear != SelectedYear)
        {
            SelectedYear = newlySelectedYear;
            ReloadAccounts(SelectedStructureType, SelectedYear, SelectedLevel, SelectedAccountRange);
        }
    }

    async void OnSelectLevel(ChangeEventArgs e)
    {
        var newlySelectedLevel = int.Parse(e.Value.ToString());
        await jsRuntime.InvokeAsync<string>("console.error", newlySelectedLevel);

        if (newlySelectedLevel != SelectedLevel)
        {
            SelectedLevel = newlySelectedLevel;
            ReloadAccounts(SelectedStructureType, SelectedYear, SelectedLevel, SelectedAccountRange);
        }
    }

    async void OnSelectStructureType(string selectedType)
    {
        Enum.TryParse(selectedType, out StructureType structureType);

        await jsRuntime.InvokeAsync<string>("console.error", structureType);
        if (structureType != SelectedStructureType)
        {
            SelectedStructureType = structureType;
            ReloadAccounts(SelectedStructureType, SelectedYear, SelectedLevel, SelectedAccountRange);
        }
    }

    async void OnSelectAccountRange(string selectedItem)
    {
        Enum.TryParse(selectedItem, out AccountRange accountRange);

        await jsRuntime.InvokeAsync<string>("console.error", accountRange);
        if (accountRange != SelectedAccountRange)
        {
            SelectedAccountRange = accountRange;
            ReloadAccounts(SelectedStructureType, SelectedYear, SelectedLevel, SelectedAccountRange);
        }

    }

    async void ReloadAccounts(StructureType structureType, int year, int level, AccountRange range)
    {
        await jsRuntime.InvokeAsync<string>("console.error", $"Year: {year}, Level: {level}");

        if (structureType != StructureType.None && year != -1 && level != -1 && range != AccountRange.None)
        {
            this.IsLoading = true;
            StateHasChanged();
            ERofYear = await DataSvc.FetchERAccountGroupsForYear(structureType, SelectedYear, SelectedLevel, range == AccountRange.AllAccounts);
            this.IsLoading = false;
            StateHasChanged();
        }
    }


}
