@page "/static-er"
@inject DataServiceER DataSvc
@inject HelpersService Helpers
@inject DropdownService DropdownSvc
@inject IJSRuntime jsRuntime

@using Projekt2.Constants 


@if (IsLoading)
{
    <p>Page is loading...</p>
}

@if (IsLoading == false)
{

    <DropdownStr Label="Gliederungsart"
                 SelectedValue="@SelectedStructureType"
                 Items="DropdownSvc.StructureTypes"
                 SelectionChanged="OnSelectStructureType" />

    <DropdownInt Label="Jahr"
                 SelectedValue="@SelectedYear"
                 Items="DropdownSvc.Years(RelevantYears)"
                 SelectionChanged="OnSelectYear" />

    <DropdownInt Label="Level"
                 SelectedValue="@SelectedLevel"
                 Items="DropdownSvc.Levels"
                 SelectionChanged="OnSelectLevel" />

    <hr />

}

@if (IsLoading == false && ERofYear != null && ERofYear.Accounts != null)
{
    <div class="content-scroll-wrap">
        <div class="content-scroll">
            <table class="table account-table-static">
                <thead>
                <tr>
                    <th class="acc-th first-col">
                        Id / Konto-Name
                    </th>
                    @if (SelectedYear >= Const.CurrentYear)
                    {
                        <th class="acc-th">
                            Plan Aufwand
                        </th>
                        <th class="acc-th">
                            Diff.A.
                        </th>
                        <th class="acc-th">
                            Plan Ertrag
                        </th>
                        <th class="acc-th">
                            Diff.B.
                        </th>
                        @if (SelectedStructureType == StructureType.Functions.ToString() ||
                             SelectedStructureType == StructureType.FunctionsThenSubjects.ToString())
                        {
                            <th class="acc-th">
                                Plan Saldo
                            </th>
                            <th class="acc-th">
                                Diff.S.
                            </th>
                        }
                    }
                    else if (SelectedYear < Const.CurrentYear)
                    {
                        <th class="acc-th account-cell-actual">
                            Aufwand
                        </th>
                        <th class="acc-th account-cell-actual">
                            Diff.A.
                        </th>
                        <th class="acc-th account-cell-actual">
                            Ertrag
                        </th>
                        <th class="acc-th account-cell-actual">
                            Diff.E.
                        </th>
                        @if (SelectedStructureType == StructureType.Functions.ToString() ||
                             SelectedStructureType == StructureType.FunctionsThenSubjects.ToString())
                        {
                            <th class="acc-th account-cell-actual">
                                Saldo
                            </th>
                            <th class="acc-th account-cell-actual">
                                Diff.S.
                            </th>
                        }
                    }
                </tr>
                </thead>
                <tbody>

                @foreach (AccountYearViewModel acc in ERofYear.Accounts)
                {
                    <CascadingValue Value="@SelectedStructureType" Name="SelectedStructureType">
                            <AccountStatic AccountYear="acc"
                                           LevelInGui="1"/>
                    </CascadingValue>
                }
                <tr>
                    <th class="first-col">
                        Total
                    </th>

                    @if (SelectedYear >= Const.CurrentYear)
                    {
                        <th class="total account-cell-budget">
                            @(Helpers.FormatDecimal(ERofYear.AccountYearTotals.ExpensesBudgetTotal))
                        </th>
                        <th class="total account-cell-budget
                            @(Helpers.GetColorIfNegativeFav(ERofYear.AccountYearTotals.PercentageChangeExpensesBudgetTotal, 0))">
                            @(Helpers.FormatPercentage(ERofYear.AccountYearTotals.PercentageChangeExpensesBudgetTotal))
                        </th>
                        <th class="total account-cell-budget">
                            @(Helpers.FormatDecimal(ERofYear.AccountYearTotals.IncomeBudgetTotal))
                        </th>
                        <th class="total account-cell-budget
                            @(Helpers.GetColorIfPositiveFav(ERofYear.AccountYearTotals.PercentageChangeIncomeBudgetTotal, 0))">
                            @(Helpers.FormatPercentage(ERofYear.AccountYearTotals.PercentageChangeIncomeBudgetTotal))
                        </th>
                        @if (SelectedStructureType == StructureType.Functions.ToString() ||
                             SelectedStructureType == StructureType.FunctionsThenSubjects.ToString())
                        {
                            <th class="total account-cell-budget">
                                @(Helpers.FormatDecimal(ERofYear.AccountYearTotals.BalanceBudgetTotal))
                            </th>
                            <th class="total account-cell-budget
                            @(Helpers.GetColorIfPositiveFav(ERofYear.AccountYearTotals.PercentageChangeBalanceBudgetTotal, 0))">
                                @(Helpers.FormatPercentage(ERofYear.AccountYearTotals.PercentageChangeBalanceBudgetTotal))
                            </th>
                        }
                    }
                    else if (SelectedYear < Const.CurrentYear)
                    {
                        <th class="total account-cell-actual">
                            @(Helpers.FormatDecimal(ERofYear.AccountYearTotals.ExpensesActualTotal))
                        </th>
                        <th class="total account-cell-actual
                            @(Helpers.GetColorIfNegativeFav(ERofYear.AccountYearTotals.PercentageChangeExpensesActualTotal, 0))">
                            @(Helpers.FormatPercentage(ERofYear.AccountYearTotals.PercentageChangeExpensesActualTotal))
                        </th>
                        <th class="total account-cell-actual">
                            @(Helpers.FormatDecimal(ERofYear.AccountYearTotals.IncomeActualTotal))
                        </th>
                        <th class="total account-cell-actual
                            @(Helpers.GetColorIfPositiveFav(ERofYear.AccountYearTotals.PercentageChangeIncomeActualTotal, 0))">
                            @(Helpers.FormatPercentage(ERofYear.AccountYearTotals.PercentageChangeIncomeActualTotal))
                        </th>
                        @if (SelectedStructureType == StructureType.Functions.ToString() ||
                             SelectedStructureType == StructureType.FunctionsThenSubjects.ToString())
                        {
                            <th class="total account-cell-actual">
                                @(Helpers.FormatDecimal(ERofYear.AccountYearTotals.BalanceActualTotal))
                            </th>
                            <th class="total account-cell-actual
                            @(Helpers.GetColorIfPositiveFav(ERofYear.AccountYearTotals.PercentageChangeBalanceActualTotal, 0))">
                                @(Helpers.FormatPercentage(ERofYear.AccountYearTotals.PercentageChangeBalanceActualTotal))
                            </th>
                        }
                    }
                </tr>
                </tbody>
            </table>
        </div>
    </div>
}


@code {

    bool IsLoading = true;

    string SelectedStructureType = StructureType.Functions.ToString();

    int SelectedYear;
    int SelectedLevel;
    List<int> RelevantYears;

    YearViewModel ERofYear { get; set; }


    protected override async Task OnInitializedAsync()
    {
        SelectedYear = Const.CurrentYear;
        SelectedLevel = 1;
        RelevantYears = DataSvc.GetRelevantYears(Const.CurrentYear - 1, ScenarioType.InputData);

        ReloadAccounts(SelectedStructureType, SelectedYear, SelectedLevel);
        IsLoading = false;
    }


    async void OnSelectYear(int inputVal)
    {
        await jsRuntime.InvokeAsync<string>("console.error", inputVal);

        if (inputVal != SelectedYear)
        {
            SelectedYear = inputVal;
            ReloadAccounts(SelectedStructureType, SelectedYear, SelectedLevel);
        }
    }

    async void OnSelectLevel(int inputVal)
    {
        await jsRuntime.InvokeAsync<string>("console.error", inputVal);

        if (inputVal != SelectedLevel)
        {
            SelectedLevel = inputVal;
            ReloadAccounts(SelectedStructureType, SelectedYear, SelectedLevel);
        }
    }

    async void OnSelectStructureType(string inputVal)
    {
        await jsRuntime.InvokeAsync<string>("console.error", inputVal);
        if (inputVal != SelectedStructureType)
        {
            SelectedStructureType = inputVal;
            ReloadAccounts(SelectedStructureType, SelectedYear, SelectedLevel);
        }
    }

    async void OnSelectAccountRange(string inputVal)
    {
        await jsRuntime.InvokeAsync<string>("console.error", inputVal);
        ReloadAccounts(SelectedStructureType, SelectedYear, SelectedLevel);
    }

    async void ReloadAccounts(string structureType, int year, int level)
    {
        await jsRuntime.InvokeAsync<string>("console.error", $"StructureType: {structureType}, Year: {year}, Level: {level}");

        if (year > 2000 &&
            level > 0 &&
            Enum.TryParse(structureType, out StructureType structureT))
        {
            this.IsLoading = true;
            StateHasChanged();
            ERofYear = await DataSvc.FetchMainGroupsForYearlyER(structureT,
                                                                SelectedYear,
                                                                SelectedLevel);
            this.IsLoading = false;
            StateHasChanged();
        }
    }


}
