@inject DataServiceER DataSvc
@inject HelpersService Helpers

@using Projekt2.Constants;


<tr class="account-row-@(LevelInGui)">
    <td class="account-label-@(LevelInGui) text-level-@(LevelInGui) first-col">
        @(AccountYear.AccountId) &nbsp;

        <a @onclick="OnAccountClicked" class="@(HasLink() ? "account-link" : "")">
            @(AccountYear.AccountName)
        </a>
    </td>

    @{
        string classSuffix = IsBudgetYear() ? "budget" : "actual";

        <td class="account-cell-@classSuffix text-level-@(LevelInGui)">
            @(areChildrenExpanded ? "" : Helpers.FormatDecimal(expenses))
        </td>
        <td class="account-cell-@classSuffix text-level-@(LevelInGui) @(Helpers.GetColorIfNegativeFav(percentChangeExpenses, 0))">
            @(areChildrenExpanded ? "" : Helpers.FormatPercentage(percentChangeExpenses))
        </td>
        <td class="account-cell-@classSuffix text-level-@(LevelInGui)">
            @(areChildrenExpanded ? "" : Helpers.FormatDecimal(income))
        </td>
        <td class="account-cell-@classSuffix text-level-@(LevelInGui) @(Helpers.GetColorIfPositiveFav(percentChangeIncome, 0))">
            @(areChildrenExpanded ? "" : Helpers.FormatPercentage(percentChangeIncome))
        </td>

        @if (IsFunctionGroupSelected())
        {
            <td class="account-cell-@classSuffix text-level-@(LevelInGui)">
                @(areChildrenExpanded ? "" : Helpers.FormatDecimal(balance))
            </td>
            <td class="account-cell-@classSuffix text-level-@(LevelInGui) @(Helpers.GetColorIfPositiveFav(percentChangeBalance, 0))">
                @(areChildrenExpanded ? "" : Helpers.FormatPercentage(percentChangeBalance))
            </td>
        }
    }
</tr>

@if (areChildrenExpanded && AccountYear.ChildAccounts != null)
{
    foreach (var a in AccountYear.ChildAccounts)
    {
        <AccountStatic AccountYear="a"
                       LevelInGui="(LevelInGui + 1)" />
    }
}


@code {

    [Parameter]
    public int LevelInGui { get; set; }

    [Parameter]
    public AccountYearViewModel AccountYear { get; set; }

    [CascadingParameter(Name = "SelectedStructureType")]
    string SelectedStructureType { get; set; }

    public bool areChildrenExpanded = false;
    public bool hasNoChildren = false;

    // Values:
    decimal? expenses = null;
    decimal? percentChangeExpenses = null;
    decimal? income = null;
    decimal? percentChangeIncome = null;
    decimal? balance = null;
    decimal? percentChangeBalance = null;


    protected override async Task OnInitializedAsync()
    {
        if (IsBudgetYear())
        {
            expenses = AccountYear.ExpensesBudget;
            percentChangeExpenses = AccountYear.PercentageChangeExpensesBudget;
            income = AccountYear.IncomeBudget;
            percentChangeIncome = AccountYear.PercentageChangeIncomeBudget;
            balance = AccountYear.BalanceBudget;
            percentChangeBalance = AccountYear.PercentageChangeBalanceBudget;
        }
        else {
            expenses = AccountYear.ExpensesActual;
            percentChangeExpenses = AccountYear.PercentageChangeExpensesActual;
            income = AccountYear.IncomeActual;
            percentChangeIncome = AccountYear.PercentageChangeIncomeActual;
            balance = AccountYear.BalanceActual;
            percentChangeBalance = AccountYear.PercentageChangeBalanceActual;
        }
    }


    /* Determines whether the account name represents a hyperlink or not */
    private bool HasLink()
    {
        if (hasNoChildren)
        {
            return false;
        }

        if (SelectedStructureType == StructureType.Functions.ToString() || SelectedStructureType == StructureType.Subjects.ToString())
        {
            return AccountYear.AccountLevel < 4;
        }
        return LevelInGui < 5;
    }


    private bool IsFunctionGroupSelected()
    {
        return SelectedStructureType == StructureType.Functions.ToString() ||
               SelectedStructureType == StructureType.FunctionsThenSubjects.ToString();
    }


    private bool IsBudgetYear()
    {
        return AccountYear.Year >= Const.CurrentYear;
    }


    async void OnAccountClicked()
    {
        if (HasLink())
        {
            areChildrenExpanded = !areChildrenExpanded;

            if (areChildrenExpanded &&
                AccountYear.ChildAccounts == null &&
                Enum.TryParse(SelectedStructureType, out StructureType structureType))
            {
                AccountYear.ChildAccounts = await DataSvc.FetchSubGroupsForYearlyEr(AccountYear,
                                                                                          structureType);

                if (AccountYear.ChildAccounts == null || AccountYear.ChildAccounts.Count == 0)
                {
                    // Revers 'expand'-command
                    areChildrenExpanded = false;
                    // Remove link on Account
                    hasNoChildren = true;
                }
            }
            StateHasChanged();
        }
    }


}
