@inject DataServiceER DataSvc
@inject HelpersService Helpers

<tr class="account-row-@(LevelInGui)">
    <td class="account-label-@(LevelInGui) text-level-@(LevelInGui)">
        @(AccountMultipleYears.AccountId) &nbsp;

        <a @onclick="OnAccountClicked" class="@(AccountMultipleYears.AccountLevel < 4 ? "account-link":"")">
            @(AccountMultipleYears.AccountName)
        </a>
    </td>

    @foreach (AccountYearViewModel m in AccountMultipleYears.YearlyAccounts)
    {
        <td class="account-cell-@(m.Year < DataSvc.CURRENT_YEAR ? "actual":"budget") text-level-@(LevelInGui)">
            @if (AreChildrenExpanded == false)
            {
                @(Helpers.FormatDecimal(GetAccountValue(m)))
            }
        </td>
    }
</tr>

@if (AreChildrenExpanded && AccountMultipleYears.Children != null)
{
    foreach (var m in AccountMultipleYears.Children)
    {
        <AccountTimeline AccountMultipleYears="m"
                         LevelInGui="(LevelInGui + 1)" />
    }
}


@code {

    [Parameter]
    public int LevelInGui { get; set; }

    [Parameter]
    public AccountMultipleYearsViewModel AccountMultipleYears { get; set; }

    [CascadingParameter(Name = "SelectedStructureType")]
    StructureType SelectedStructureType { get; set; }

    [CascadingParameter(Name = "SelectedERAccountType")]
    ERAccountType SelectedERAccountType { get; set; }

    [CascadingParameter(Name = "SelectedAccountRange")]
    AccountRange SelectedAccountRange { get; set; }

    public bool AreChildrenExpanded { get; set; }


    decimal? GetAccountValue(AccountYearViewModel m)
    {
        if (SelectedERAccountType == ERAccountType.Expenses)
        {
            return m.Year < DataSvc.CURRENT_YEAR ? m.ExpensesActual : m.ExpensesBudget;
        }
        if (SelectedERAccountType == ERAccountType.Income)
        {
            return m.Year < DataSvc.CURRENT_YEAR ? m.IncomeActual : m.IncomeBudget;
        }
        if (SelectedERAccountType == ERAccountType.Balances)
        {
            return m.Year < DataSvc.CURRENT_YEAR ? m.BalanceActual : m.BalanceBudget;
        }
        return null;
    }

    async void OnAccountClicked()
    {
        if (AccountMultipleYears.AccountLevel == 4)
        {
            return;
        }
        AreChildrenExpanded = !AreChildrenExpanded;

        if (AreChildrenExpanded && AccountMultipleYears.Children == null)
        {
            AccountMultipleYears.Children = await DataSvc.FetchSubGroupsOfERAccountTimeline(AccountMultipleYears, SelectedStructureType, SelectedERAccountType, SelectedAccountRange == AccountRange.AllAccounts);
        }
        StateHasChanged();
    }


}
