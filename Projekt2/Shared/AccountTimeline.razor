@inject DataServiceER DataSvc
@inject ScenarioServiceER ScenarioSvc
@inject HelpersService Helpers

@using Projekt2.Constants


<tr class="account-row-@(LevelInGui)">
    <td class="account-label-@(LevelInGui) text-level-@(LevelInGui) first-col">
        @(AccountMultipleYears.AccountId) &nbsp;

        <a @onclick="OnAccountClicked" class="@(HasLink() ? "account-link":"")">
            @(AccountMultipleYears.AccountName)
        </a>
    </td>

    @foreach (AccountYearViewModel m in AccountMultipleYears.YearlyAccounts)
    {
        <td class="@(GetAccCellClassValues(m, GetAccountValue(SelectedERAccountType, m)))">
            @if (areChildrenExpanded == false)
            {
                @(GetRoundedAndFormattedValue(m))

                <span class="@GetColor(SelectedERAccountType, m)">
                    <i class="@(GetArrowTag(m))"></i>
                </span>
            }
        </td>
    }
</tr>


@if (areChildrenExpanded && AccountMultipleYears.Children != null)
{
    foreach (var m in AccountMultipleYears.Children)
    {
        <AccountTimeline AccountMultipleYears="m"
                         LevelInGui="(LevelInGui + 1)" />
    }
}


@code {

    [Parameter]
    public int LevelInGui { get; set; }

    [Parameter]
    public AccountMultipleYearsViewModel AccountMultipleYears { get; set; }

    [CascadingParameter(Name = "SelectedStructureType")]
    string SelectedStructureType { get; set; }

    [CascadingParameter(Name = "SelectedERAccountType")]
    string SelectedERAccountType { get; set; }

    [CascadingParameter(Name = "SelectedScenarioType")]
    string SelectedScenarioType { get; set; }

    [CascadingParameter(Name = "CurrentScenario")]
    Scenario CurrentScenario { get; set; }

    public bool areChildrenExpanded { get; set; }
    public bool hasNoChildren { get; set; }


    private string GetRoundedAndFormattedValue(AccountYearViewModel m)
    {
        decimal? accountValueRounded = Helpers.GetRoundedValue(GetAccountValue(SelectedERAccountType, m));
        return Helpers.FormatDecimal(accountValueRounded);
    }


    /* Determines whether the account name represents a hyperlink or not */
    private bool HasLink()
    {
        if (hasNoChildren)
        {
            return false;
        }

        if (SelectedStructureType == StructureType.Functions.ToString() || SelectedStructureType == StructureType.Subjects.ToString())
        {
            return AccountMultipleYears.AccountLevel < 4;
        }
        return LevelInGui < 5;
    }


    decimal? GetAccountValue(string type, AccountYearViewModel m)
    {
        if (Enum.TryParse(type, out ERAccountType accType))
        {
            return accType switch
            {
                ERAccountType.Expenses => m.Year < Const.CurrentYear ? m.ExpensesActual : m.ExpensesBudget,
                ERAccountType.Income => m.Year < Const.CurrentYear ? m.IncomeActual : m.IncomeBudget,
                ERAccountType.Balances => m.Year < Const.CurrentYear ? m.BalanceActual : m.BalanceBudget,
                _ => null
            };
        }
        return null;
    }

    decimal? GetAccountChange(string type, AccountYearViewModel m)
    {
        if (Enum.TryParse(type, out ERAccountType accType))
        {
            return accType switch
            {
                ERAccountType.Expenses => m.Year < Const.CurrentYear ? m.PercentageChangeExpensesActual : m.PercentageChangeExpensesBudget,
                ERAccountType.Income => m.Year < Const.CurrentYear ? m.PercentageChangeIncomeActual : m.PercentageChangeIncomeBudget,
                ERAccountType.Balances => m.Year < Const.CurrentYear ? m.PercentageChangeBalanceActual : m.PercentageChangeBalanceBudget,
                _ => null
            };
        }
        return null;
    }

    string GetColor(string type, AccountYearViewModel m)
    {
        var h = Helpers;

        if (Enum.TryParse(type, out ERAccountType accType))
        {
            return accType switch
            {
                ERAccountType.Expenses => m.Year < Const.CurrentYear ? h.GetColorIfNegativeFav(m.PercentageChangeExpensesActual) :
                                                                         h.GetColorIfNegativeFav(m.PercentageChangeExpensesBudget),
                ERAccountType.Income => m.Year < Const.CurrentYear ? h.GetColorIfPositiveFav(m.PercentageChangeIncomeActual) :
                                                                       h.GetColorIfPositiveFav(m.PercentageChangeIncomeBudget),
                ERAccountType.Balances => m.Year < Const.CurrentYear ? h.GetColorIfPositiveFav(m.PercentageChangeBalanceActual) :
                                                                         h.GetColorIfPositiveFav(m.PercentageChangeBalanceBudget),
                _ => null
            };
        }
        return null;
    }


    private string GetArrowTag(AccountYearViewModel m)
    {
        decimal? percentChangeExact = GetAccountChange(SelectedERAccountType, m);
        bool isFirstYearOfTimeline = m.Year == AccountMultipleYears.SelectedYears[0];
        string rotationFactor = Helpers.GetDegreeOfRotation(percentChangeExact, isFirstYearOfTimeline);
        return rotationFactor == null ? "" : $"fas fa-arrow-up fa-rotate-{rotationFactor}";
    }


    string GetAccCellClassValues(AccountYearViewModel m, decimal? value)
    {
        string result = $"account-cell-{(m.Year < Const.CurrentYear ? "actual" : "budget")}";
        result += $" text-level-{LevelInGui}";
        if (SelectedERAccountType == ERAccountType.Balances.ToString())
        {
            result += $" {(Helpers.IsPositive(value) ? "pos-value" : "neg-value")}";
        }
        return result;
    }

    async void OnAccountClicked()
    {
        if (HasLink())
        {
            areChildrenExpanded = !areChildrenExpanded;

            if (areChildrenExpanded &&
                AccountMultipleYears.Children == null &&
                Enum.TryParse(SelectedStructureType, out StructureType selectStructureT) &&
                Enum.TryParse(SelectedERAccountType, out ERAccountType selectErAccT) &&
                Enum.TryParse(SelectedScenarioType, out ScenarioType selectScenarioT))
            {

                if (selectScenarioT == ScenarioType.InputData)
                {
                    AccountMultipleYears.Children = await DataSvc.FetchSubGroupsForTimelineEr(AccountMultipleYears, selectStructureT, selectErAccT);
                }
                else if (selectScenarioT == ScenarioType.Scenario && CurrentScenario != null)
                {
                    AccountMultipleYears.Children = ScenarioSvc.FetchSubGroupsForTimelineEr(CurrentScenario, AccountMultipleYears, selectStructureT, selectErAccT);
                }

                if (AccountMultipleYears.Children == null || AccountMultipleYears.Children.Count == 0)
                {
                    // Revers 'expand'-command
                    areChildrenExpanded = false;
                    // Remove link on Account
                    hasNoChildren = true;
                }
            }
            StateHasChanged();
        }
    }


}
